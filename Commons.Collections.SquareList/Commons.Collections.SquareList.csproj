<Project Sdk="Microsoft.NET.Sdk">

    <PropertyGroup>
        <LangVersion>preview</LangVersion>
        <TargetFrameworks>netstandard2.1;net8.0;net9.0</TargetFrameworks>
        <AssemblyName>Commons.Collections.SquareList</AssemblyName>
        <OutputType>Library</OutputType>
        <RootNamespace>Commons.Collections</RootNamespace>
        <Authors>Rafael 'Monoman' Teixeira</Authors>
        <PackageProjectUrl>https://github.com/managed-commons</PackageProjectUrl>
        <RepositoryUrl>https://github.com/managed-commons/managed-commons-collections-squarelist</RepositoryUrl>
        <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
        <PackageReleaseNotes>Packaging for $(TargetFrameworks)</PackageReleaseNotes>
        <Description>Managed Commons library for SquareList specialized collection.</Description>
        <Copyright>Copyright Â© 2016-2024 Rafael 'Monoman' Teixeira</Copyright>
        <PackageTags>Collections Ordered</PackageTags>
        <PackageLicenseExpression>MIT</PackageLicenseExpression>
        <PackageReadmeFile>README.md</PackageReadmeFile>
        <Version>1.1.1</Version>
        <EnableNETAnalyzers>true</EnableNETAnalyzers>
        <EnforceCodeStyleInBuild>true</EnforceCodeStyleInBuild>
        <AnalysisLevel>preview</AnalysisLevel>
        <ImplicitUsings>enable</ImplicitUsings>
    </PropertyGroup>

    <ItemGroup>
        <Using Include="System.Collections"/>
        <Using Remove="System.Net.Http"/>
        <None Include="..\README.md" Pack="true" PackagePath="\"/>
        <None Include="..\LICENSE" Pack="true" PackagePath="\"/>
    </ItemGroup>
    
    <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
        <DefineConstants>DEBUG;TRACE</DefineConstants>
    </PropertyGroup>
    
    <Target AfterTargets="Pack" Name="PushPackage" Condition="'$(OS)' == 'Windows_NT'">
        <PropertyGroup>
            <LatestPackage>$(PackageId).$(Version).nupkg</LatestPackage>
            <PushCommand>dotnet nuget push $(PackageOutputAbsolutePath)$(LatestPackage) --skip-duplicate --force-english-output --source nuget.org</PushCommand>
        </PropertyGroup>
        <Exec ConsoleToMSBuild="true" Command="$(PushCommand)" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true" StandardErrorImportance="low" StandardOutputImportance="low">
            <Output PropertyName="PushOutput" TaskParameter="ConsoleOutput" />
        </Exec>
        <PropertyGroup>
			<VersionAlreadyPushed>$([System.Text.RegularExpressions.Regex]::IsMatch('$(PushOutput)', 'already exists'))</VersionAlreadyPushed>
        </PropertyGroup>
        <Message Importance="high" Text="Pushed $(LatestPackage) to Nuget" Condition="!$(VersionAlreadyPushed)" />
        <Message Importance="high" Text="Didn't push $(LatestPackage) to Nuget - Already there" Condition="$(VersionAlreadyPushed)" />
    </Target>

    <Target Name="UpdateREADME" BeforeTargets="Build">
        <ItemGroup>
            <ReadMe Include="..\README.md" />
        </ItemGroup>
        <PropertyGroup>
            <VersionPattern>__Commons.Collections.SquareList \d+\.\d+\.\d+</VersionPattern>
            <VersionResult>__Commons.Collections.SquareList $(Version)</VersionResult>
        </PropertyGroup>
        <RegexTemplating InputFile="@(ReadMe)" Pattern="$(VersionPattern)" NewValue="$(VersionResult)"/>
    </Target>

    <UsingTask TaskName="RegexTemplating"
		TaskFactory="RoslynCodeTaskFactory"
		AssemblyFile="$(MSBuildBinPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <InputFile ParameterType="System.String" Required="true" />
            <Pattern ParameterType="System.String" Required="true" />
            <NewValue ParameterType="System.String" Required="true" />
            <OutputFile ParameterType="System.String" />
            <Verbose ParameterType="System.Boolean" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.IO" />
            <Using Namespace="System.Text" />
            <Using Namespace="System.Text.RegularExpressions" />
            <Code Type="Fragment" Language="C#">
                <![CDATA[
          if (File.Exists(InputFile)) {
              if (string.IsNullOrWhiteSpace(OutputFile))
                OutputFile = InputFile;
              var contentBefore = File.ReadAllText(InputFile, Encoding.UTF8);
              var contentAfter = Regex.Replace(contentBefore, Pattern, NewValue);
              if (contentAfter != contentBefore || OutputFile != InputFile) {
                File.WriteAllBytes(OutputFile, Encoding.UTF8.GetBytes(contentAfter));
                if (Verbose)
                  Log.LogMessageFromText($"Replaced the pattern '{Pattern}' by the value '{NewValue}' on '{OutputFile}'!", MessageImportance.High);
              }
          } else
            Log.LogMessageFromText($"InputFile '{InputFile}' not found!", MessageImportance.High);
        ]]>
            </Code>
        </Task>
    </UsingTask>
    
</Project>
